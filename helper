
import android.content.Context;
import android.support.annotation.NonNull;
import android.text.TextUtils;

import com.airbnb.lottie.LottieComposition;
import com.airbnb.lottie.LottieCompositionFactory;
import com.airbnb.lottie.LottieResult;
import com.xunlei.common.concurrent.XLThreadPool;

import java.util.HashMap;

/**
 * @author huhanjun
 * @since 2020/4/27
 * <p>
 * lottie动画加载帮助类，解决Lottie动画加载过慢问题
 */
public class LottieHelper {

    private static LottieHelper sLottieHelper;

    private LottieHelper() {
        mLottieCompositionHashMap = new HashMap<>();
    }

    public static LottieHelper getInstance() {
        if (sLottieHelper == null) {
            synchronized (LottieHelper.class) {
                if (sLottieHelper == null) {
                    sLottieHelper = new LottieHelper();
                }

            }

        }
        return sLottieHelper;
    }

    /**
     * lottie动画文件异步加载回调
     */
    public interface LottieLoadObserver {
        void onLoad(LottieComposition composition);
    }

    private HashMap<String, LottieComposition> mLottieCompositionHashMap;

    /**
     * 异步加载lottie动画文件
     *
     * @param context
     * @param fileName
     * @param observer
     */
    public void getCompositionAsyn(@NonNull Context context, @NonNull String fileName, @NonNull LottieLoadObserver observer) {
        if (TextUtils.isEmpty(fileName)) {
            return;
        }

        XLThreadPool.execute(new Runnable() {
            @Override
            public void run() {
                LottieComposition lottieComposition = getComposition(fileName);
                if (lottieComposition == null) {
                    LottieResult<LottieComposition> result = LottieCompositionFactory.fromAssetSync(context, fileName);
                    lottieComposition = result.getValue();
                    mLottieCompositionHashMap.put(fileName, lottieComposition);
                }
                deliveryLottieCompositionLoad(observer, lottieComposition);
            }
        });
    }

    private void deliveryLottieCompositionLoad(@NonNull LottieLoadObserver observer, LottieComposition lottieComposition) {
        //抛回主线程去执行
        XLThread.postOnUiThread(new Runnable() {
            @Override
            public void run() {
                observer.onLoad(lottieComposition);
            }
        });
    }

    public LottieComposition getComposition(String fileName) {
        return mLottieCompositionHashMap.get(fileName);
    }

    public void removeComposition(String fileName) {
        mLottieCompositionHashMap.remove(fileName);
    }
}
